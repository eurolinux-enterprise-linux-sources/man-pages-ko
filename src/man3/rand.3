.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Mon Mar 29 22:48:44 1993, David Metcalfe
.\" Modified Wed Apr 28 01:35:00 1993, Lars Wirzenius
.\" Modified Sat Jul 24 18:39:41 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Thu May 18 10:10:13 1995, Rik Faith (faith@cs.unc.edu) to add
.\"          better discussion of problems with rand on other systems.
.\"          (Thanks to Esa Hyyti{ (ehyytia@snakemail.hut.fi).)
.\" "
.TH RAND 3  "1995년 5월 18일" "GNU" "리눅스 프로그래머 매뉴얼"
.SH 이름
rand, srand \- random 수 생성기.
.SH 사용법
.nf
.B #include <stdlib.h>
.sp
.B int rand(void);
.sp
.BI "void srand(unsigned int " seed );
.fi
.SH 설명
\fBrand()\fP 함수는 0과 \fBRAND_MAX\fR사이의 pseudo-random 정수를 
리턴한다.
.PP
\fBsrand()\fP 함수는 인자를 \fBrand()\fP가 리턴하는 pseudo-random 정수의 
새로운 연속된 수들을 위한 종자로 설정한다.
이들 연속된 수들은 같은 seed 값으로 \fBsrand()\fP를 호출하여 반복된다.
.PP
만일 어떤 seed 값도 제공되지 않는다면, \fBrand()\fP 함수는 자동적으로
1 값으로 종자가 된다.
.SH 반환값
\fBrand()\fP 함수는 0과 RAND_MAX사이의 값을 반환한다.
\fBsrand()\fP는 어떤 값도 반환하지 않는다.
.SH 주의
Linux C 라이브러리의 \fBrand()\fP와 \fBsrand()\fP 버전은 \fBrandom()\fP와
\fBsrandom()\fP처럼 같은 random 수 생성기를 사용한다. 그래서 lower-order bit
들은 higher-order bit들 만큼 랜덤하다.
그러나, 예전 
.B rand()
작동에서, lower-order bit들은 higher-order bit들보다 덜 랜덤했다.
.PP
.I Numerical Recipes in C: The Art of Scientific Computing
(William H. Press, Brian P. Flannery, Saul A. Teukolsky, William
T. Vetterling; New York: Cambridge University Press, 1990 (1st ed,
p. 207))에, 다음과 같은 주석이 있다:
.RS
"If you want to generate a random integer between 1 and 10, you should
always do it by
.RS
.sp
j=1+(int) (10.0*rand()/(RAND_MAX+1.0));
.sp
.RE
and never by anything resembling
.RS
.sp
j=1+((int) (1000000.0*rand()) % 10);
.sp
.RE
(which uses lower-order bits)."
.RE
.PP
Random-number 생성은 매우 복잡한 주제이다.
.I Numerical Recipes in C
책(위에 언급한)은 Chapter 7 (Random Numbers)에서 random-number 생성에 관한 실제적인 훌륭한 토론을 제공한다.
.PP
더 이론적인 토론을 원하면, 깊이 있게 많은 실제적인 이슈를 다루고 있는
Donald E. Knuth의
.IR "The Art of Computer Programming" ,
volume 2 (Seminumerical Algorithms), 2nd 판의
Chapter 3 (Random Numbers)를 참고해라.; Reading, Massachusetts:
Addison-Wesley Publishing Company, 1981.
.SH 호환
SVID 3, BSD 4.3, ISO 9899
.SH 관련 항목
.BR random "(3), " srandom "(3), " initstate "(3), " setstate (3)
.SH 역자
정강훈 <skyeyes@soback.kornet.net>, 2001년 3월 9일
