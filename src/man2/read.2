.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sat Jul 24 00:06:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Wed Jan 17 16:02:32 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Thu Apr 11 19:26:35 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Fri Jan 31 16:47:33 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sat Jul 12 20:45:39 1997 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\"
.TH READ 2 "1997년 6월 12일" "Linux 2.0.32" "리눅스 프로그래머 매뉴얼"
.SH 이름
read \- 파일 기술자(file descriptor)를 통해서 읽어들인다.
.SH 사용법
.nf
.B #include <unistd.h>
.sp
.BI "ssize_t read(int " fd ", void *" buf ", size_t " count );
.fi
.SH 설명
.BR read() 는 
파일 기술자
.IR fd 에서 
.IR buf 로
시작하는 버퍼에 
.I count
바이트까지 읽기를 시도한다.
.PP
만일
.IR count 가 
0이라면 \fBread()\fP는 0을 반환하며 다른 결과는 가지지 않는다.
만일
.IR count 가 
SSIZE_MAX보다 크다면, 결과는 예측할 수 없다.
.PP
.SH 반환값
성공시, 읽은 바이트 수를 반환하며(0은 파일의 끝을 나타낸다.)
파일 포인터의 위치는 읽은 수만큼 이동된다.
만일 이 수가 요구된 바이트의 수보다 작더라도 에러는 아니다;
이것은 실제로 즉시 이용할 수 있는 바이트가 거의 없기 때문이거나 
(아마도 이것은 파일의 끝이어서 닫았거나 파이프나 단말기에서 읽기 
때문이다.) \fBread()\fP가 어떤 신호에 의해 인터럽트가 되었기 때문이다.

에러시, \-1을 리턴하며
.IR errno 는 
적당한 값으로 설정된다.
이 경우 파일 포인터의 위치가 바뀔지 어떨지는 예측할수 없다.
.SH 에러
.TP
.B EINTR
어떤 데이터를 읽기도 전에 함수가 신호에 의해 인터럽트되었다.
.TP
.B EAGAIN 
넌-블록킹 I/O가 
.BR O_NONBLOCK 을 
사용하여 선택되어졌고 즉시 읽을 수 있는 데이터가 없다.
.TP
.B EIO
I/O 에러. 이것은 백그라운드 프로세스 그룹에 있는 프로세스가 
제어되는 tty 단말기에서 읽기를 시도할때, 그리고 이것이 무시되거나 
봉쇄되는 SIGTTIN이거나 또는 프로세스 그룹이 고아일때 일어난다.
또한 디스크나 테이프에서 읽는동안 저레벨(low-level) I/O 에러가
있을 때 일어난다.
.TP
.B EISDIR
.IR fd 가 
디렉토리를 가리킨다.
.TP
.B EBADF
.IR fd 가 
유효한 파일 기술자가 아니거나 읽기 위해 열려지지 않았다.
.TP
.B EINVAL
.IR fd 가 
읽기에 적당하지 않은 객체와 연결되었다.
.TP
.B EFAULT
.IR buf 는 
접근할 수 없는 주소공간을 가리키고 있다.
.PP
.IR fd 에
접속된 객체에 의존하여 다른 에러가 일어날 수 있다.
POSIX는 데이터 일부를 읽은 후 인터럽트 되었을 경우
.BR read 가 
\-1이나(
.IR errno 는 
EINTR로 설정된다.) 이미 읽은 바이트의 수를 리턴하도록 허용한다.
.SH 호환
SVr4, SVID, AT&T, POSIX, X/OPEN, BSD 4.3
.SH RESTRICTIONS
NFS 파일 시스템에서, 읽은 적은 양의 데이터는 단지 처음 타임 스탬프에서만
갱신되며 연속적인 콜은 그렇게 하지 않는다.
이것은 캐싱(caching)하는 클라이언트 쪽 특성 때문인데, 모든 NFS 
클라이언트가 서버에 접근 시간(atime) 갱신을 하지는 않으며 
클라이언트 쪽 캐쉬에서 읽기를 한 클라이언트는 서버 쪽 읽기가 없기
때문에 서버에 접근시간 갱신을 하지 않기 때문이다.
UNIX 구문은 클라이언트 쪽 캐싱 특성을 불가능하게 하여 얻어지며 
이것은 대부분의 상황에서 서버 부하를 증가시키고 성능을 감소시킨다.
.SH 관련 항목
.BR close (2),
.BR fcntl (2),
.BR ioctl (2),
.BR lseek (2),
.BR readdir (2),
.BR readlink (2),
.BR select (2),
.BR write (2),
.BR fread (3)
.SH 역자
정강훈 <skyeyes@soback.kornet.net>, 2000년 5월 28일
