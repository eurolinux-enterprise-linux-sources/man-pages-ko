.\" Copyright (c) 1989, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)hexdump.1	8.2 (Berkeley) 4/18/94
.\"
.Dd April 18, 1994
.Dt HEXDUMP 1
.Os
.Sh NAME
.Nm hexdump
.Nd ascii, decimal, hexadecimal, octal dump
.Sh 사용법
.Nm hexdump
.Op Fl bcdovx
.Op Fl e Ar format_string
.Op Fl f Ar format_file
.Op Fl n Ar length
.Bk -words
.Op Fl s Ar skip
.Ek
.Ar file  ...
.Sh 설명
.B hexdump
풀그림은 지정한 파일, 또는 표준 입력으로 부터 입력된 것을 
사용자가 지정한 형식으로 보여주는 연장틀이다.
.Pp
사용할 수 있는 옵션은 다음과 같다:
.Bl -tag -width Fl
.It Fl b
.Em 8진수 1 바이트씩 보기.
입력된 파일의 내용을 세자리 씩 한줄에 16개로 나누워 8진수로 보여준다.
.It Fl c
.Em 캐릭터 1 바이트씩 보기.
입력된 파일의 내용을 세자리 씩 한줄에 16개로 나누워 문자형식으로 보여준다.
문자형식이 아닌 문자는 세자리 8진수로 보여준다.
.It Fl d
.Em 10진수 2 바이트씩 보기.
입력된 파일의 내용을 다섯자리 씩 한줄에 8개로 나누워 10진수로 보여준다.
.It Fl e Ar format_string 
보여줄 형식을 \fIformat_string\fR 형식으로 지정한다.
.It Fl f Ar format_file 
보여줄 형식이 하나 또는 그 이상의 줄로 나뉘어진 파일을 지정한다.
비여있는 줄, # 글자로 시작하는 줄은 무시된다.
.It Fl n Ar length 
입력된 파일의 
.Ar length
바이트만 보여준다.
.It Fl o
.Em 8진수 2 바이트씩 보기.
입력된 파일의 내용을 여섯자리 씩 한줄에 8개로 나누워 8진수로 보여준다.
.It Fl s Ar offset 
입력 파일의 처음부터 
.Ar offset
파이트를 통과하고 보여준다.
.Ar offset
사용할 숫자는 초기값으로 10진수 이며, 
.Cm 0x
나
.Cm 0X 
로 시작하는 숫자는 16진수로 처리한다.
.Cm 0 
으로 시작하는 숫자는 8진수.
또한 숫자 끝에 
.Cm b ,
.Cm k ,
.Cm m
문자가 올 수 있는데, 이것은 각각 
.Li 512 ,
.Li 1024 ,
.Li 1048576 
바이트를 의미한다.
.It Fl v
이 옵션은 모든 입력 자료를 보여준다.
Without the  \-v option, any number of groups of
output lines, which would be
identical to the immediately preceding group of output lines (except
for the input offsets), are replaced with a line comprised of a
single asterisk.
.It Fl x
.Em 16진수 2바이트씩 보기.
입력된 파일의 내용을 4자리씩 한줄에 8개로 나누워 보여준다.
.El
.Pp
각 입력 파일을 위해,
.Nm hexdump
명령은 각각 표준 출력으로 연속적으로 복사한다. 그리고,
.Fl e
또는
.Fl f
옵션이 사용되고 있으면, 지정한
출력 양식에 따라 입력되는 자료를 변환한다.
.Ss Formats
포멧 문자열은 공백문자로 구분되는 여러개의 포멧 유닛을 가진다.
하나의 포멧 유닛은 세 부분으로 구성된다. 반복횟수, 바이트 횟수, 
포멧 형식이다.
.Pp
반복횟수는 선택적인 양수 정수이며, 초기값은 1이다.
각각의 포멧은 이 횟수만큼 적용된다.
.Pp
바이트 횟수는 선택적인 양수 정수이며, 이 값이 정해지면, 
이 바이트 만큼 변화하면, 반복횟수를 읽어 또 이 바이트만큼 변환한다.
.Pp
반복횟수와 바이트 횟수가 둘다 사용되면, 슬래쉬(/)로 구분한다.
슬래쉬 앞뒤의 어떠한 공백문자도 모두 무시된다.
.Pp
포멧은 따움표(" ")로 묶겨져야 한다.
포멧은 fprintf 함수(
.Xr fprintf 3 ) 
에서 사용하는 것과 비슷하다.
.Bl -bullet -offset indent
.It
* 기호는 필드 넓이나, 정밀도로 사용되지 않을 수도 있다.
.It
바이트 카운트나 필드 정밀도 지정에서는 ``s'' 변환문자가 필요하다.
(이것은 
.Xr fprintf 3
함수의 사용법과 다르다.)
.It
``h'', ``l'', ``n'', ``p'', ``q'' 변환 문자는 지원되지 않는다.
.It
다음은 C 표준에서 지원하는 \\ 문자들이다.
.Bd -ragged -offset indent -compact
.Bl -column <alert_character>
.It NUL	\e0
.It <alert character>	\ea
.It <backspace>	\eb
.It <form-feed>	\ef
.It <newline>	\en
.It <carriage return>	\er
.It <tab>	\et
.It <vertical tab>	\ev
.El
.Ed
.El
.Pp
Hexdump에서는 부가적으로 다음 변환 문자들도 지원한다.
.Bl -tag -width Fl
.It Cm \&_a Ns Op Cm dox 
Display the input offset, cumulative across input files, of the
next byte to be displayed.
The appended characters
.Cm d ,
.Cm o ,
and
.Cm x
specify the display base
as decimal, octal or hexadecimal respectively.
.It Cm \&_A Ns Op Cm dox 
Identical to the
.Cm \&_a
conversion string except that it is only performed
once, when all of the input data has been processed.
.It Cm \&_c
Output characters in the default character set.
Nonprinting characters are displayed in three character, zero-padded
octal, except for those representable by standard escape notation
(see above),
which are displayed as two character strings.
.It Cm _p
Output characters in the default character set.
Nonprinting characters are displayed as a single
.Dq Cm \&. .
.It Cm _u
Output US ASCII characters, with the exception that control characters are
displayed using the following, lower-case, names.
Characters greater than 0xff, hexadecimal, are displayed as hexadecimal
strings.
.Bl -column \&000_nu \&001_so \&002_st \&003_et \&004_eo
.It \&000\ nul\t001\ soh\t002\ stx\t003\ etx\t004\ eot\t005\ enq
.It \&006\ ack\t007\ bel\t008\ bs\t009\ ht\t00A\ lf\t00B\ vt
.It \&00C\ ff\t00D\ cr\t00E\ so\t00F\ si\t010\ dle\t011\ dc1
.It \&012\ dc2\t013\ dc3\t014\ dc4\t015\ nak\t016\ syn\t017\ etb
.It \&018\ can\t019\ em\t01A\ sub\t01B\ esc\t01C\ fs\t01D\ gs
.It \&01E\ rs\t01F\ us\t0FF\ del
.El
.El
.Pp
The default and supported byte counts for the conversion characters
are as follows:
.Bl -tag -width  "Xc,_Xc,_Xc,_Xc,_Xc,_Xc" -offset indent
.It Li \&%_c , \&%_p , \&%_u , \&%c
One byte counts only.
.It Xo
.Li \&%d , \&%i , \&%o ,
.Li \&%u , \&%X , \&%x 
.Xc
Four byte default, one, two and four byte counts supported.
.It Xo
.Li \&%E , \&%e , \&%f ,
.Li \&%G , \&%g 
.Xc
Eight byte default, four byte counts supported.
.El
.Pp
The amount of data interpreted by each format string is the sum of the
data required by each format unit, which is the iteration count times the
byte count, or the iteration count times the number of bytes required by
the format if the byte count is not specified.
.Pp
The input is manipulated in ``blocks'', where a block is defined as the
largest amount of data specified by any format string.
Format strings interpreting less than an input block's worth of data,
whose last format unit both interprets some number of bytes and does
not have a specified iteration count, have the iteration count
incremented until the entire input block has been processed or there
is not enough data remaining in the block to satisfy the format string.
.Pp
If, either as a result of user specification or hexdump modifying
the iteration count as described above, an iteration count is
greater than one, no trailing whitespace characters are output
during the last iteration.
.Pp
It is an error to specify a byte count as well as multiple conversion
characters or strings unless all but one of the conversion characters
or strings is
.Cm \&_a
or
.Cm \&_A .
.Pp
If, as a result of the specification of the
.Fl n
option or end-of-file being reached, input data only partially
satisfies a format string, the input block is zero-padded sufficiently
to display all available data (i.e. any format units overlapping the
end of data will display some number of the zero bytes).
.Pp
Further output by such format strings is replaced by an equivalent
number of spaces.
An equivalent number of spaces is defined as the number of spaces
output by an
.Cm s
conversion character with the same field width
and precision as the original conversion character or conversion
string but with any
.Dq Li \&+ ,
.Dq \&\ \& ,
.Dq Li \&#
conversion flag characters
removed, and referencing a NULL string.
.Pp
If no format strings are specified, the default display is equivalent
to specifying the
.Fl x
option.
.Pp
.Nm hexdump
exits 0 on success and >0 if an error occurred.
.Sh EXAMPLES
Display the input in perusal format:
.Bd -literal -offset indent
"%06.6_ao "  12/1 "%3_u "
"\et\et" "%_p "
"\en"
.Ed
.Pp
Implement the \-x option:
.Bd -literal -offset indent
"%07.7_Ax\en"
"%07.7_ax  " 8/2 "%04x " "\en"
.Ed
.Sh 관련 항목
.Xr adb 1
